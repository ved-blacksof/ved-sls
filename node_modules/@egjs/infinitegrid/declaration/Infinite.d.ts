import Component from "@egjs/component";
export interface OnInfiniteRequestAppend {
    key?: string | number | undefined;
    nextKey?: string | number | undefined;
    isVirtual: boolean;
}
export interface OnInfiniteRequestPrepend {
    key?: string | number;
    nextKey?: string | number;
    isVirtual: boolean;
}
export interface OnInfiniteChange {
    prevStartCursor: number;
    prevEndCursor: number;
    nextStartCursor: number;
    nextEndCursor: number;
}
export interface InfiniteEvents {
    requestAppend: OnInfiniteRequestAppend;
    requestPrepend: OnInfiniteRequestPrepend;
    change: OnInfiniteChange;
}
export interface InfiniteOptions {
    useRecycle?: boolean;
    threshold?: number;
    defaultDirection?: "start" | "end";
}
export interface InfiniteItem {
    key: string | number;
    startOutline: number[];
    endOutline: number[];
    isVirtual?: boolean;
}
export declare class Infinite extends Component<InfiniteEvents> {
    options: Required<InfiniteOptions>;
    protected startCursor: number;
    protected endCursor: number;
    protected size: number;
    protected items: InfiniteItem[];
    protected itemKeys: Record<string | number, InfiniteItem>;
    constructor(options: InfiniteOptions);
    scroll(scrollPos: number): void;
    _requestVirtualItems(): boolean;
    setCursors(startCursor: number, endCursor: number): void;
    setSize(size: number): void;
    getStartCursor(): number;
    getEndCursor(): number;
    isLoading(direction: "start" | "end"): boolean;
    setItems(nextItems: InfiniteItem[]): void;
    syncItems(nextItems: InfiniteItem[]): boolean;
    getItems(): InfiniteItem[];
    getVisibleItems(): InfiniteItem[];
    getItemByKey(key: string | number): InfiniteItem;
    getRenderedVisibleItems(): InfiniteItem[];
    destroy(): void;
}
