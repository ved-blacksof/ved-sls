import Grid, { GridOptions, GridFunction, GridItem, ContainerManagerStatus, ItemRendererStatus, Methods } from "@egjs/grid";
import { GROUP_TYPE, INFINITEGRID_METHODS, ITEM_TYPE } from "./consts";
import { GroupManagerStatus } from "./GroupManager";
import InfiniteGrid from "./InfiniteGrid";
import { InfiniteGridItem } from "./InfiniteGridItem";
import { Renderer } from "./Renderer/Renderer";
import { ScrollManagerStatus } from "./ScrollManager";
export interface InfiniteGridStatus {
    itemRenderer: ItemRendererStatus;
    containerManager: ContainerManagerStatus;
    groupManager: GroupManagerStatus;
    scrollManager: ScrollManagerStatus;
}
export interface InfiniteGridGroup {
    type: GROUP_TYPE;
    groupKey: string | number;
    grid: Grid;
    items: InfiniteGridItem[];
    renderItems: InfiniteGridItem[];
}
export interface CategorizedGroup<Item extends InfiniteGridItemInfo = InfiniteGridItem> {
    groupKey: number | string;
    items: Item[];
}
export interface InfiniteGridItemInfo {
    type?: ITEM_TYPE;
    groupKey?: string | number;
    key?: string | number;
    element?: HTMLElement | null;
    html?: string;
    data?: Record<string, any>;
}
export interface InfiniteGridOptions extends GridOptions {
    container?: boolean | string | HTMLElement;
    containerTag?: string;
    threshold?: number;
    useRecycle?: boolean;
    gridConstructor?: GridFunction;
    renderer?: Renderer | null;
}
export interface InsertedPlaceholdersResult {
    group: InfiniteGridGroup;
    items: InfiniteGridItem[];
    remove(): void;
}
export interface OnRequestAppend {
    currentTarget: InfiniteGrid;
    groupKey: string | number | undefined;
    nextGroupKey?: string | number | undefined;
    isVirtual: boolean;
    wait(): void;
    ready(): void;
}
export interface OnRequestPrepend {
    currentTarget: InfiniteGrid;
    groupKey: string | number | undefined;
    nextGroupKey?: string | number | undefined;
    isVirtual: boolean;
    wait(): void;
    ready(): void;
}
export interface OnRenderComplete {
    currentTarget: InfiniteGrid;
    mounted: InfiniteGridItem[];
    updated: InfiniteGridItem[];
    direction: "start" | "end";
    isResize: boolean;
    startCursor: number;
    endCursor: number;
    items: InfiniteGridItem[];
    groups: InfiniteGridGroup[];
}
export interface OnContentError {
    currentTarget: InfiniteGrid;
    element: HTMLElement;
    target: HTMLElement;
    item: InfiniteGridItem;
    update(): void;
    remove(): void;
}
export interface OnChangeScroll {
    currentTarget: InfiniteGrid;
    direction: "start" | "end";
    scrollPos: number;
    relativeScrollPos: number;
}
export interface InfiniteGridEvents {
    changeScroll: OnChangeScroll;
    requestAppend: OnRequestAppend;
    requestPrepend: OnRequestPrepend;
    renderComplete: OnRenderComplete;
    contentError: OnContentError;
}
export interface OnPickedRenderComplete {
    mounted: GridItem[];
    updated: GridItem[];
    isResize: boolean;
    direction: "start" | "end";
}
export interface OnRequestInsert {
    key: string | number | undefined;
    nextKey: string | number | undefined;
    isVirtual: boolean;
}
export interface RenderingOptions {
    grid: InfiniteGrid<any> | null | undefined;
    status: InfiniteGridStatus | null | undefined;
    useFirstRender: boolean | null | undefined;
    usePlaceholder: boolean | null | undefined;
    useLoading: boolean | null | undefined;
    horizontal: boolean | null | undefined;
}
export declare type InfiniteGridInsertedItems = string | Array<string | InfiniteGridItemInfo | HTMLElement>;
export declare type InfiniteGridMethods<Component> = Methods<Component, InfiniteGrid, typeof INFINITEGRID_METHODS>;
export declare type InfiniteGridFunction = (new (container: HTMLElement, options: Partial<GridOptions>) => InfiniteGrid) & {
    propertyTypes: any;
    defaultOptions: any;
};
