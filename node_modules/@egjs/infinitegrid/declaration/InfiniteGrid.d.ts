import Component from "@egjs/component";
import { ContainerManager, Properties, RenderOptions, ItemRenderer } from "@egjs/grid";
import { STATUS_TYPE } from "./consts";
import { GroupManager } from "./GroupManager";
import { Infinite } from "./Infinite";
import { InfiniteGridItem, InfiniteGridItemStatus } from "./InfiniteGridItem";
import { ScrollManager } from "./ScrollManager";
import { InfiniteGridEvents, InfiniteGridGroup, InfiniteGridInsertedItems, InfiniteGridItemInfo, InfiniteGridOptions, InfiniteGridStatus, InsertedPlaceholdersResult } from "./types";
declare class InfiniteGrid<Options extends InfiniteGridOptions = InfiniteGridOptions> extends Component<InfiniteGridEvents> {
    static defaultOptions: Required<InfiniteGridOptions>;
    static propertyTypes: {
        gap: import("@egjs/grid").PROPERTY_TYPE;
        defaultDirection: import("@egjs/grid").PROPERTY_TYPE;
        renderOnPropertyChange: import("@egjs/grid").PROPERTY_TYPE;
        preserveUIOnDestroy: import("@egjs/grid").PROPERTY_TYPE;
        useFit: import("@egjs/grid").PROPERTY_TYPE;
    };
    protected wrapperElement: HTMLElement;
    protected scrollManager: ScrollManager;
    protected itemRenderer: ItemRenderer;
    protected containerManager: ContainerManager;
    protected infinite: Infinite;
    protected groupManager: GroupManager;
    protected options: Required<Options>;
    private _waitType;
    constructor(wrapper: HTMLElement | string, options: Options);
    renderItems(options?: RenderOptions): this;
    getWrapperElement(): HTMLElement;
    getScrollContainerElement(): HTMLElement;
    getContainerElement(): HTMLElement;
    syncItems(items: InfiniteGridItemInfo[]): this;
    setCursors(startCursor: number, endCursor: number, useFirstRender?: boolean): this;
    getStartCursor(): number;
    getEndCursor(): number;
    append(items: InfiniteGridInsertedItems, groupKey?: string | number): this;
    prepend(items: InfiniteGridInsertedItems, groupKey?: string | number): this;
    insert(index: number, items: InfiniteGridInsertedItems, groupKey?: string | number): this;
    getStatus(type?: STATUS_TYPE): InfiniteGridStatus;
    setPlaceholder(info: Partial<InfiniteGridItemStatus> | null): this;
    setLoading(info: Partial<InfiniteGridItemStatus> | null): this;
    appendPlaceholders(items: number | InfiniteGridItemStatus[], groupKey?: string | number): InsertedPlaceholdersResult;
    prependPlaceholders(items: number | InfiniteGridItemStatus[], groupKey?: string | number): InsertedPlaceholdersResult;
    removePlaceholders(type: "start" | "end" | {
        groupKey: string | number;
    }): void;
    setStatus(status: InfiniteGridStatus, useFirstRender?: boolean): this;
    removeGroupByIndex(index: number): this;
    removeGroupByKey(key: number | string): this;
    removeByIndex(index: number): this;
    removeByKey(key: string | number): this;
    updateItems(items?: InfiniteGridItem[], options?: RenderOptions): this;
    getItems(includePlaceholders?: boolean): InfiniteGridItem[];
    getVisibleItems(includePlaceholders?: boolean): InfiniteGridItem[];
    getRenderingItems(): InfiniteGridItem[];
    getGroups(includePlaceholders?: boolean): InfiniteGridGroup[];
    getVisibleGroups(includePlaceholders?: boolean): InfiniteGridGroup[];
    wait(direction?: "start" | "end"): void;
    ready(): void;
    isWait(): boolean;
    destroy(): void;
    private _getRenderer;
    private _getRendererItems;
    private _syncItems;
    private _render;
    private _update;
    private _resizeScroll;
    private _syncGroups;
    private _syncInfinite;
    private _scroll;
    private _onScroll;
    private _onChange;
    private _onRendererUpdated;
    private _onResize;
    private _onRequestAppend;
    private _onRequestPrepend;
    private _onRequestInsert;
    private _onContentError;
    private _onRenderComplete;
    private _checkStartLoading;
    private _checkEndLoading;
}
interface InfiniteGrid extends Properties<typeof InfiniteGrid> {
}
export default InfiniteGrid;
