import { GRID_METHODS } from "./consts";
import { ContainerManager, ContainerManagerStatus } from "./ContainerManager";
import Grid from "./Grid";
import { GridItem, GridItemStatus } from "./GridItem";
import { ItemRenderer, ItemRendererStatus } from "./ItemRenderer";
export interface GridOptions {
    horizontal?: boolean;
    percentage?: Array<"position" | "size"> | boolean;
    isEqualSize?: boolean;
    isConstantSize?: boolean;
    gap?: number;
    attributePrefix?: string;
    resizeDebounce?: number;
    maxResizeDebounce?: number;
    autoResize?: boolean;
    useFit?: boolean;
    useTransform?: boolean;
    renderOnPropertyChange?: boolean;
    preserveUIOnDestroy?: boolean;
    defaultDirection?: "start" | "end";
    externalItemRenderer?: ItemRenderer | null;
    externalContainerManager?: ContainerManager | null;
}
export interface GridOutlines {
    start: number[];
    end: number[];
}
export interface RenderOptions {
    outline?: number[];
    direction?: "start" | "end";
    useResize?: boolean;
}
export interface GridStatus {
    items: GridItemStatus[];
    outlines: GridOutlines;
    containerManager: ContainerManagerStatus;
    itemRenderer: ItemRendererStatus;
}
export interface OnRenderComplete {
    direction: "start" | "end";
    isResize: boolean;
    mounted: GridItem[];
    updated: GridItem[];
}
export interface OnContentError {
    element: HTMLElement;
    target: HTMLElement;
    item: GridItem;
    update(): void;
}
export declare type GridAlign = "start" | "center" | "end" | "justify" | "stretch";
export declare type GridEvents = {
    renderComplete: OnRenderComplete;
    contentError: OnContentError;
};
export interface DOMRect {
    width?: number;
    height?: number;
    top?: number;
    left?: number;
}
export interface GridRect {
    inlinePos?: number;
    contentPos?: number;
    inlineSize?: number;
    contentSize?: number;
}
export interface DestroyOptions {
    preserveUI?: boolean;
}
export declare type Properties<GridClass extends {
    propertyTypes: any;
    defaultOptions: any;
}> = Pick<Required<GridClass["defaultOptions"]>, keyof GridClass["propertyTypes"]>;
export declare type Methods<Component, Class, MethodList extends Readonly<Array<keyof Class>>, MethodKeys extends keyof Class = MethodList[number]> = {
    [key in MethodKeys]: Class[key] extends (...params: any[]) => Class ? (...params: Parameters<Class[key]>) => Component : Class[key];
};
export declare type GridMethods<Component> = Methods<Component, Grid, typeof GRID_METHODS>;
export declare type GridFunction = (new (container: HTMLElement, options: Partial<GridOptions>) => Grid) & {
    propertyTypes: any;
    defaultOptions: any;
};
