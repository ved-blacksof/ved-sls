import Component from "@egjs/component";
import { ContainerManager } from "./ContainerManager";
import { DestroyOptions, GridEvents, GridOptions, GridOutlines, GridStatus, Properties, RenderOptions } from "./types";
import { ItemRenderer } from "./ItemRenderer";
import { GridItem } from "./GridItem";
declare abstract class Grid<Options extends GridOptions = GridOptions> extends Component<GridEvents> {
    static defaultOptions: Required<GridOptions>;
    static propertyTypes: {
        gap: import("./consts").PROPERTY_TYPE;
        defaultDirection: import("./consts").PROPERTY_TYPE;
        renderOnPropertyChange: import("./consts").PROPERTY_TYPE;
        preserveUIOnDestroy: import("./consts").PROPERTY_TYPE;
        useFit: import("./consts").PROPERTY_TYPE;
        outlineSize: import("./consts").PROPERTY_TYPE;
        outlineLength: import("./consts").PROPERTY_TYPE;
    };
    options: Required<Options>;
    protected containerElement: HTMLElement;
    protected containerManager: ContainerManager;
    protected itemRenderer: ItemRenderer;
    protected items: GridItem[];
    protected outlines: GridOutlines;
    private _renderTimer;
    private _im;
    abstract applyGrid(items: GridItem[], direction: "start" | "end", outline: number[]): GridOutlines;
    constructor(containerElement: HTMLElement | string, options?: Partial<Options>);
    getContainerElement(): HTMLElement;
    getItems(): GridItem[];
    getChildren(): HTMLElement[];
    setItems(items: GridItem[]): this;
    getContainerInlineSize(): number;
    getOutlines(): GridOutlines;
    setOutlines(outlines: GridOutlines): this;
    syncElements(options?: RenderOptions): this;
    updateItems(items?: GridItem[], options?: RenderOptions): this;
    renderItems(options?: RenderOptions): this;
    getStatus(minimize?: boolean): GridStatus;
    setStatus(status: GridStatus): this;
    getComputedOutlineSize(items?: GridItem[]): number;
    getComputedOutlineLength(items?: GridItem[]): number;
    destroy(options?: DestroyOptions): void;
    protected checkReady(options?: RenderOptions): void;
    protected scheduleRender(): void;
    protected fitOutlines(useFit?: boolean): void;
    protected readyItems(mounted: GridItem[], updated: GridItem[], options: RenderOptions): void;
    private _renderComplete;
    private _clearRenderTimer;
    private _refreshContainerContentSize;
    private _resizeContainer;
    private _onResize;
    private _init;
}
interface Grid extends Properties<typeof Grid> {
}
export default Grid;
