import Grid from "../Grid";
import { PROPERTY_TYPE } from "../consts";
import { GridOptions, Properties, GridOutlines } from "../types";
import { GridItem } from "../GridItem";
export interface PackingGridOptions extends GridOptions {
    aspectRatio?: number;
    sizeWeight?: number;
    ratioWeight?: number;
    weightPriority?: "size" | "ratio" | "custom";
}
export declare class PackingGrid extends Grid<PackingGridOptions> {
    static propertyTypes: {
        aspectRatio: PROPERTY_TYPE;
        sizeWeight: PROPERTY_TYPE;
        ratioWeight: PROPERTY_TYPE;
        weightPriority: PROPERTY_TYPE;
        gap: PROPERTY_TYPE;
        defaultDirection: PROPERTY_TYPE;
        renderOnPropertyChange: PROPERTY_TYPE;
        preserveUIOnDestroy: PROPERTY_TYPE;
        useFit: PROPERTY_TYPE;
        outlineSize: PROPERTY_TYPE;
        outlineLength: PROPERTY_TYPE;
    };
    static defaultOptions: Required<PackingGridOptions>;
    applyGrid(items: GridItem[], direction: "start" | "end", outline: number[]): GridOutlines;
    private _findBestFitArea;
    getComputedOutlineLength(): number;
    getComputedOutlineSize(): number;
    private _getWeight;
}
export interface PackingGrid extends Properties<typeof PackingGrid> {
}
